<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace Sourcekin\Content\Model;

final class Field
{
    private $key;
    private $value;
    private $type;

    public function __construct(Key $key, Value $value, ValueType $type)
    {
        $this->key = $key;
        $this->value = $value;
        $this->type = $type;
    }

    public function key(): Key
    {
        return $this->key;
    }

    public function value(): Value
    {
        return $this->value;
    }

    public function type(): ValueType
    {
        return $this->type;
    }

    public function withKey(Key $key): Field
    {
        return new self($key, $this->value, $this->type);
    }

    public function withValue(Value $value): Field
    {
        return new self($this->key, $value, $this->type);
    }

    public function withType(ValueType $type): Field
    {
        return new self($this->key, $this->value, $type);
    }

    public static function fromArray(array $data): Field
    {
        if (! isset($data['key']) || ! \is_string($data['key'])) {
            throw new \InvalidArgumentException("Key 'key' is missing in data array or is not a string");
        }

        $key = Key::fromString($data['key']);

        if (! isset($data['value']) || ! \is_string($data['value'])) {
            throw new \InvalidArgumentException("Key 'value' is missing in data array or is not a string");
        }

        $value = Value::fromString($data['value']);

        if (! isset($data['type']) || ! \is_string($data['type'])) {
            throw new \InvalidArgumentException("Key 'type' is missing in data array or is not a string");
        }

        $type = ValueType::fromName($data['type']);

        return new self(
            $key,
            $value,
            $type
        );
    }

    public function toArray(): array
    {
        return [
            'key' => $this->key->toString(),
            'value' => $this->value->toString(),
            'type' => $this->type->name(),
        ];
    }

    public function equals(Field $field): bool
    {
        if (\get_class($this) !== \get_class($field)) {
            return false;
        }

        return $this->key->toString() === $field->key->toString()
            && $this->value->toString() === $field->value->toString()
            && $this->type->equals($field->type);
    }
}
