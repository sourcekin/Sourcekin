<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace Sourcekin\Content\Model;

final class Content
{
    private $owner;
    private $name;
    private $type;
    private $index;
    private $fields;
    private $children;

    public function __construct(DocumentId $owner, ContentName $name, ContentType $type, Index $index, ?array $fields, ?array $children)
    {
        $this->owner = $owner;
        $this->name = $name;
        $this->type = $type;
        $this->index = $index;
        foreach ($fields as $__value) {
            if (! $__value instanceof \Sourcekin\Content\Model\Field) {
                throw new \InvalidArgumentException('fields expected an array of Sourcekin\Content\Model\Field');
            }
            $this->fields[] = $__value;
        }

        foreach ($children as $__value) {
            if (! $__value instanceof \Sourcekin\Content\Model\Content) {
                throw new \InvalidArgumentException('children expected an array of Sourcekin\Content\Model\Content');
            }
            $this->children[] = $__value;
        }
    }

    public function owner(): DocumentId
    {
        return $this->owner;
    }

    public function name(): ContentName
    {
        return $this->name;
    }

    public function type(): ContentType
    {
        return $this->type;
    }

    public function index(): Index
    {
        return $this->index;
    }

    public function fields(): ?array
    {
        return $this->fields;
    }

    public function children(): ?array
    {
        return $this->children;
    }

    public function withOwner(DocumentId $owner): Content
    {
        return new self($owner, $this->name, $this->type, $this->index, $this->fields, $this->children);
    }

    public function withName(ContentName $name): Content
    {
        return new self($this->owner, $name, $this->type, $this->index, $this->fields, $this->children);
    }

    public function withType(ContentType $type): Content
    {
        return new self($this->owner, $this->name, $type, $this->index, $this->fields, $this->children);
    }

    public function withIndex(Index $index): Content
    {
        return new self($this->owner, $this->name, $this->type, $index, $this->fields, $this->children);
    }

    public function withFields(?array $fields): Content
    {
        return new self($this->owner, $this->name, $this->type, $this->index, $fields, $this->children);
    }

    public function withChildren(?array $children): Content
    {
        return new self($this->owner, $this->name, $this->type, $this->index, $this->fields, $children);
    }

    public static function fromArray(array $data): Content
    {
        if (! isset($data['owner']) || ! \is_string($data['owner'])) {
            throw new \InvalidArgumentException("Key 'owner' is missing in data array or is not a string");
        }

        $owner = DocumentId::fromString($data['owner']);

        if (! isset($data['name']) || ! \is_string($data['name'])) {
            throw new \InvalidArgumentException("Key 'name' is missing in data array or is not a string");
        }

        $name = ContentName::fromString($data['name']);

        if (! isset($data['type']) || ! \is_string($data['type'])) {
            throw new \InvalidArgumentException("Key 'type' is missing in data array or is not a string");
        }

        $type = ContentType::fromString($data['type']);

        if (! isset($data['index']) || ! \is_int($data['index'])) {
            throw new \InvalidArgumentException("Key 'index' is missing in data array or is not a int");
        }

        $index = Index::fromScalar($data['index']);

        if (isset($data['fields'])) {
            if (! \is_array($data['fields'])) {
                throw new \InvalidArgumentException("Value for 'fields' is not an array in data array");
            }

            $fields = Field::fromArray($data['fields']);
        } else {
            $fields = null;
        }

        if (isset($data['children'])) {
            if (! \is_array($data['children'])) {
                throw new \InvalidArgumentException("Value for 'children' is not an array in data array");
            }

            $children = Content::fromArray($data['children']);
        } else {
            $children = null;
        }

        return new self(
            $owner,
            $name,
            $type,
            $index,
            $fields,
            $children
        );
    }

    public function toArray(): array
    {
        if (null === $this->fields) {
            return null;
        }

        $fields = [];

        foreach ($this->fields as $__value) {
            $fields[] = $__value->toArray();
        }

        if (null === $this->children) {
            return null;
        }

        $children = [];

        foreach ($this->children as $__value) {
            $children[] = $__value->toArray();
        }

        return [
            'owner' => $this->owner->toString(),
            'name' => $this->name->toString(),
            'type' => $this->type->toString(),
            'index' => $this->index->toScalar(),
            'fields' => $fields,
            'children' => $children,
        ];
    }

    public function equals(Content $content): bool
    {
        if (\get_class($this) !== \get_class($content)) {
            return false;
        }

        if (\count($this->fields) !== \count($content->fields)) {
            return false;
        }

        foreach ($this->fields as $__i => $__value) {
            if (! $content->fields[$__i]->equals($__value)) {
                return false;
            }
        }

        if (\count($this->children) !== \count($content->children)) {
            return false;
        }

        foreach ($this->children as $__i => $__value) {
            if (! $content->children[$__i]->equals($__value)) {
                return false;
            }
        }

        return $this->owner->toString() === $content->owner->toString()
            && $this->name->toString() === $content->name->toString()
            && $this->type->toString() === $content->type->toString()
            && $this->index->toScalar() === $content->index->toScalar();
    }
}
